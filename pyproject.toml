[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[project]
name = "earnorm"
version = "0.1.4"
description = "EarnBase ORM - Async-first ORM for MongoDB and more"
authors = [
    {name = "EarnBase", email = "dev@earnbase.com"}
]
readme = "README.md"
license = {text = "MIT"}
keywords = ["orm", "mongodb", "async", "database", "earnbase"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Topic :: Database",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Framework :: AsyncIO",
]
requires-python = ">=3.12"
dependencies = [
    "motor>=3.7.1",
    "pymongo>=4.13.2",
    "pydantic>=2.11.7",
    "dependency-injector>=4.48.1",
    "typing-extensions>=4.14.0",
    "python-dotenv>=1.1.1",
    "PyYAML>=6.0.2",
    "redis>=6.2.0",
    "prometheus-client>=0.22.1",
    "structlog>=25.4.0",
    "phonenumbers>=9.0.8",
    "asyncpg>=0.30.0",
    "aiomysql>=0.2.0",
    "fastapi>=0.115.14",
    "rich>=14.0.0",
    "psutil>=7.0.0",
    "jsonschema>=4.24.0",
]

[project.urls]
Homepage = "https://github.com/earnbase/earnorm"
Repository = "https://github.com/earnbase/earnorm"
Documentation = "https://earnorm.readthedocs.io"
"Bug Tracker" = "https://github.com/earnbase/earnorm/issues"

[project.scripts]
earnorm = "earnorm.cli:main"

[tool.poetry]
packages = [
    { include = "earnorm" }
]

[tool.poetry.dependencies]
python = "^3.12"

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
pytest = "^8.3.4"
pytest-asyncio = "^0.25.0"
pytest-cov = "^6.0.0"
pytest-mock = "^3.14.0"
pytest-xdist = "^3.6.0"
pytest-html = "^4.1.1"
pytest-benchmark = "^4.0.0"
mongomock-motor = "^0.0.34"
fakeredis = "^2.26.3"
factory-boy = "^3.3.1"
freezegun = "^1.5.1"

[tool.poetry.group.dev.dependencies]
black = "^25.1.0"
isort = "^6.0.1"
mypy = "^1.16.1"
pylint = "^3.3.7"
pre-commit = "^4.2.0"
mkdocs = "^1.5.0"
mkdocs-material = "^9.6.14"
mkdocstrings = {extras = ["python"], version = "^0.29.1"}
ruff = "^0.12.1"



[tool.black]
line-length = 120
target-version = ['py312']
include = '\.pyi?$'

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 120

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
check_untyped_defs = true

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = ["test_*.py"]
addopts = "-v --cov=earnorm --cov-report=term-missing"

[tool.coverage.run]
source = ["earnorm"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "pass",
    "raise ImportError",
]

[tool.pylint]
disable = [
    "C0111",  # missing-docstring
    "C0103",  # invalid-name
    "C0301",  # line-too-long
    "C0302",  # too-many-lines
    "C0330",  # wrong-hanging-indentation
    "C0326",  # bad-whitespace
    "W0311",  # bad-indentation
    "W0603",  # global-statement
    "W0703",  # broad-except
    "R0903",  # too-few-public-methods
    "R0913",  # too-many-arguments
    "R0914",  # too-many-locals
]

[tool.ruff]
line-length = 120
target-version = "py312"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "RUF", # ruff-specific rules
]
ignore = [
    "E501",   # line-too-long (handled by formatter)
    "UP007",  # Use X | Y for type annotations (keep Union for compatibility)
    "UP035",  # typing.AsyncContextManager is deprecated (keep for compatibility)
    "UP038",  # Use X | Y in isinstance (keep tuple for readability)
    "UP040",  # TypeAlias annotation (keep for compatibility)
    "UP046",  # Generic subclass (keep for compatibility)
    "UP047",  # Generic function (keep for compatibility)
    "B904",   # raise from (not always needed)
    "RUF022", # __all__ sorting (manual control preferred)
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401"]  # Ignore unused imports in __init__.py files
"**/test_*.py" = ["B011", "B018"]  # Allow assert statements in tests

[tool.ruff.lint.isort]
known-first-party = ["earnorm"]
combine-as-imports = true
